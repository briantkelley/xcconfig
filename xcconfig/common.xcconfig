//
// Copyright (c) 2014-2020 Brian T. Kelley
//

// Build Options
VALIDATE_WORKSPACE = YES

// Linking
DEAD_CODE_STRIPPING = YES

// Packaging
APPLY_RULES_IN_COPY_FILES = YES
INFOPLIST_OUTPUT_FORMAT = binary
PLIST_FILE_OUTPUT_FORMAT = binary
STRINGS_FILE_OUTPUT_ENCODING = binary

// Search Paths
ALWAYS_SEARCH_USER_PATHS = NO
USE_HEADERMAP = NO

// Apple LLVM - Code Generation
GCC_NO_COMMON_BLOCKS = YES

// Apple LLVM - Custom Compiler Flags
	// -Wc++98-compat[-pedantic] is disabled because the standard is 20+ years
	//     old. C++11 compatibility is the oldest anyone should care about.
	// -Wdirect-ivar-access is disabled because accessing an ivar in -init or
	//     -dealloc, or which is an implementation detail and not a property,
	//     is both reasonable and valid.
	// -Wgnu-zero-variadic-macro-arguments is disabled so NSAssert compiles
	//     when assertions are disabled.
	// -Wpadded is disabled so structures don't require dummy variables to
	//     explicitly expand to the alignment boundary.
WARNING_CFLAGS = -Weverything -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-direct-ivar-access -Wno-gnu-zero-variadic-macro-arguments -Wno-padded

// Apple LLVM - Language
GCC_C_LANGUAGE_STANDARD = c11

// Apple LLVM - Language - C++
CLANG_CXX_LANGUAGE_STANDARD = c++17
CLANG_CXX_LIBRARY = libc++
GCC_ENABLE_CPP_EXCEPTIONS = YES
GCC_ENABLE_CPP_RTTI = YES

// Apple LLVM - Language - Modules
CLANG_ENABLE_MODULES = YES

// Apple LLVM - Language - Objective C
CLANG_ENABLE_OBJC_ARC = YES
CLANG_ENABLE_OBJC_WEAK = YES
GCC_ENABLE_OBJC_EXCEPTIONS = YES

// Apple LLVM - Preprocessing
ENABLE_STRICT_OBJC_MSGSEND = YES

// Apple LLVM - Warning Policies
GCC_TREAT_WARNINGS_AS_ERRORS = YES

// Apple LLVM - Warnings - All languages
CLANG_WARN_ASSIGN_ENUM = YES
CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES
CLANG_WARN_BOOL_CONVERSION = YES
CLANG_WARN_COMMA = YES
CLANG_WARN_CONSTANT_CONVERSION = YES
CLANG_WARN_DOCUMENTATION_COMMENTS = YES
CLANG_WARN_EMPTY_BODY = YES
CLANG_WARN_ENUM_CONVERSION = YES
CLANG_WARN_FLOAT_CONVERSION = YES
CLANG_WARN_FRAMEWORK_INCLUDE_PRIVATE_FROM_PUBLIC = YES
CLANG_WARN_IMPLICIT_SIGN_CONVERSION = YES
CLANG_WARN_INFINITE_RECURSION = YES
CLANG_WARN_INT_CONVERSION = YES
CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES
CLANG_WARN_PRAGMA_PACK = YES
CLANG_WARN_PRIVATE_MODULE = YES
CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES
CLANG_WARN_SEMICOLON_BEFORE_METHOD_BODY = YES
CLANG_WARN_STRICT_PROTOTYPES = YES
CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION = YES
CLANG_WARN_SUSPICIOUS_MOVE = YES
CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE
CLANG_WARN_UNREACHABLE_CODE = YES
GCC_WARN_64_TO_32_BIT_CONVERSION = YES
GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS = YES
GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS = YES
GCC_WARN_ABOUT_MISSING_NEWLINE = YES
GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES
GCC_WARN_ABOUT_POINTER_SIGNEDNESS = YES
GCC_WARN_ABOUT_RETURN_TYPE = YES
GCC_WARN_CHECK_SWITCH_STATEMENTS = YES
GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED = YES
GCC_WARN_MISSING_PARENTHESES = YES
GCC_WARN_SHADOW = YES
GCC_WARN_SIGN_COMPARE = YES
GCC_WARN_TYPECHECK_CALLS_TO_PRINTF = YES
GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE
GCC_WARN_UNKNOWN_PRAGMAS = YES
GCC_WARN_UNUSED_FUNCTION = YES
GCC_WARN_UNUSED_LABEL = YES
GCC_WARN_UNUSED_PARAMETER = YES
GCC_WARN_UNUSED_VALUE = YES
GCC_WARN_UNUSED_VARIABLE = YES

// Apple LLVM - Warnings - C++
CLANG_WARN_ATOMIC_IMPLICIT_SEQ_CST = YES
CLANG_WARN_DELETE_NON_VIRTUAL_DTOR = YES
CLANG_WARN_RANGE_LOOP_ANALYSIS = YES
CLANG_WARN_VEXING_PARSE = YES
CLANG_WARN__EXIT_TIME_DESTRUCTORS = YES
GCC_WARN_ABOUT_INVALID_OFFSETOF_MACRO = YES
GCC_WARN_HIDDEN_VIRTUAL_FUNCTIONS = YES
GCC_WARN_NON_VIRTUAL_DESTRUCTOR = YES

// Apple LLVM - Warnings - Objective C
CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES
CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES
CLANG_WARN_MISSING_NOESCAPE = YES
CLANG_WARN_OBJC_IMPLICIT_ATOMIC_PROPERTIES = YES
CLANG_WARN_OBJC_INTERFACE_IVARS = YES
CLANG_WARN_OBJC_LITERAL_CONVERSION = YES
CLANG_WARN_OBJC_MISSING_PROPERTY_SYNTHESIS = YES
CLANG_WARN_OBJC_ROOT_CLASS = YES
CLANG_WARN__DUPLICATE_METHOD_MATCH = YES
GCC_WARN_ALLOW_INCOMPLETE_PROTOCOL = YES
GCC_WARN_UNDECLARED_SELECTOR = YES

// Apple LLVM - Warnings - Objective C and ARC
CLANG_WARN_OBJC_EXPLICIT_OWNERSHIP_TYPE = YES
CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES
CLANG_WARN_OBJC_REPEATED_USE_OF_WEAK = YES
CLANG_WARN__ARC_BRIDGE_CAST_NONARC = YES

// Metal Compiler - Build Options
MTL_FAST_MATH = YES

// Asset Catalog Compiler - Options
ASSETCATALOG_COMPILER_OPTIMIZATION = space

// Compress PNG Files - Packaging
COMPRESS_PNG_FILES = YES
STRIP_PNG_TEXT = YES

// Static Analyzer - Generic Issues
CLANG_ANALYZER_DEADCODE_DEADSTORES = YES
CLANG_ANALYZER_MEMORY_MANAGEMENT = YES
CLANG_ANALYZER_NONNULL = YES
CLANG_ANALYZER_USE_AFTER_MOVE = YES_AGGRESSIVE

// Static Analyzer - Issues - Apple APIs
CLANG_ANALYZER_GCD = YES
CLANG_ANALYZER_GCD_PERFORMANCE = YES
CLANG_ANALYZER_LOCALIZABILITY_EMPTY_CONTEXT = YES
CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED = YES
CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE
CLANG_ANALYZER_OBJC_COLLECTIONS = YES
CLANG_ANALYZER_OBJC_NSCFERROR = YES

// Static Analyzer - Issues - Security
CLANG_ANALYZER_SECURITY_FLOATLOOPCOUNTER = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_GETPW_GETS = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_MKSTEMP = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_RAND = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_STRCPY = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_UNCHECKEDRETURN = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_VFORK = YES
CLANG_ANALYZER_SECURITY_KEYCHAIN_API = YES

// Swift Compiler - Code Generation
SWIFT_SWIFT3_OBJC_INFERENCE = Off

// Swift Compiler - Language
SWIFT_VERSION = 5.0

// Swift Compiler - Warnings Policies
SWIFT_TREAT_WARNINGS_AS_ERRORS = YES
